FINAL PROJECT - PART B: BUGGY URL VALIDATOR
Team Members: Robert Sparks, Bryan Bauer, Philip Tan


Testing Details & Methodology:
In testing URLValidator, we wanted to try and follow the original URLValidatorTest.java code as a basis. 
Because of this, much of our test code is very similar to that of the code in URLValidatorTest.java.  W
e ran manual tests, multiple partition tests, and also two programmatic tests to try and find errors.


Methodologies:  



1. Manual tests: Did you find any failures? 

Valid: http://www.amazon.com - tested valid
Valid: http://www.google.com/search  - tested valid
Valid: http://first.my-testing/test/index.html  - tested invalid
Valid: http://broke.hostname/test/index.html  - tested invalid

The list above are some of URL’s that we tested.  We had a number tests pass as expected and some that did not match our expected results.  
For known valid URL’s, the manual tests correctly identified only part of the URLS that should have passed.  In the four manual tests we did, 
with known correct URL’s, only two of them returned as valid.  We found failures in these two URL’s:

VALID URL: http://hostname, TEST RETURNS: false
VALID URL: http://localhost/test/index.html, TEST RETURNS: false

In the 4 we tested for non valid all of them returned tests as we expected those urls are as follows.
http://first.my-testing/test/index.html
http://broke.hostname/test/index.html
file:///C:\\some.file
file://C:\\some.file



2. Partitions: Did you find any failures? 

For the partitions portion of testing we broke it down into two divisions each with its own various sets of tests. 
For the first partition we divided by various schemes. We tested http and https first. All of the URl’s we expected to return 
true did with the exception of one, and all the test expected to return false did. We also tested other schemes such as ftp and h3t 
these also validated to correct values. 

We did find a bug in the first Partition sets when we tried a blank path (amazon.com), this returned false when it should have returned true. 
We were able to locate the bug in the code due to this test. We can assume that all similar URL’s should validate to true unless they have a null path. 
This helped us track down the bug in the isValidPath method.

For the second Partition we broke it down by various different local URLs. We tested hostname and localhost in various different formats. 
What we discovered is a plethora of buggy like results. ‘hostname’ should of evaluated to true but evaluated to false. localhost did as well. 
We’re assuming by testing these local URLs that all local URls of the same format would have the same result. 



3. Programming based testing:

For programming based testing, we took the Result Pair arrays from the original validator test code, and modified them to be arrays of strings with 
different parts of the URL’s. We then used for loops to loop through every possible combination of URL. We split up the known true and false URL sections and tested 
each category separately. The isValid method was used to test if the URL was valid. Interestingly enough, isValid caught all the known false URL’s, but only marked 168 
URL’s true for the known correct URL’s and 1512 as false that should have been true. 



4. Name of your tests:

We followed the predefined naming conventions given to us. The test method names are:
* public void testManualTest()  -  This tested URL’s manually
* public void testYourFirstPartition()  -  This tested the first partition. In it we checked multiple different schemes.
* public void testYourSecondPartition()  -  This tested the second partition.In it we checked multple different authorities.
* public void testIsValid() - This tested 1,680 different URLs of many different formats, each URL was pieced together using a plethora of nested for loops. This function tested only the URLs that are  valid
* public void testAnyOtherUnitTest() -  This tested 1,440 different URLs of many different formats, each URL was pieced together using a plethora of nested for loops. This function tested only the URLs that aren’t valid.



5. How did you work in the team? How did you divide your work? How did you collaborate? 

As a team, we worked together by meeting on Google Hangouts and using an Eclipse add-on called Saros which allowed us to edit and collaborate on code in real time. 
Originally we intended to use Cloud 9 online IDE and Kode online IDE, but we found those difficult and cumbersome to use. Saros however, works very well. In our collaboration, 
we did not explicitly divide up sections of work. Rather, we added and modified code, and ran tests while in a Google Hangouts session together, discussing along the way. It was like 
a free-flowing 3 man “pair” programming session for “Xtreme programming”.  This technique worked quite well and we would highly recommend it.  It was dynamic and organic in nature and 
we seemed to feed off one person's idea then expand and sprout new ideas.




6. Did you use any of Agan’s principle in debugging URLValidator?

Yes. In addition to finding bugs using the isValid method, we did use Agan’s principles. The first rule says we must understand the source code and that it is pointlessly hard 
to debug something we don’t understand. In this project, the first thing we did was study how URLValidatorTest worked. In the second part of this project, we were asked to write our own tests to 
debug URLValidator.  In doing so, we spent some time studying the isValid method, and where the URL validity checking methods came from. In looking around, we explored the other provided files and found other bugs.

Agan’s second rule is to “Make it fail”. In debugging, we marked the known valid and invalid URL’s and URL sections.  This way we had something to compare it to after running the tests.  While applying Agan’s first 
rule, reading the source code and trying to understand how it worked, we also applied the second rule. We left comments in the source code, marking bugs. We then went back to our test code, modified things, and 
ran the tests again to check the results.






BUG REPORTS:

BUG 1
FILE:UrlValidator.java
METHOD: isValidScheme
LINE: 336

Title:  URL’s with no scheme are marked as invalid

Class:  Serious Bug discovered when testing.  Bug traced to isValidScheme method line 336.

Product:  UrlValidator.java   :Class version
Testing Environment Using Eclipse IDE using urlValidatorTest.java                 
           
Is it reproducible: Yes

Description
===========
1. What is the failure?
   When running tests on URL’s, we found that URL’s without a scheme resulted in failure, and were marked invalid.

2. How did you find it?
   We ran manual tests, as well as partition tests separating out the sections of the URL.

3. What is the cause of that failure? Explain what part of code is causing it?
   The cause of the failure is in the file ‘UrlValidator.java’, in the method isValidScheme.  The method first checks whether the scheme is null, and returns false if it is. 
   This should actually return true. Null schemes are valid. For example: ‘amazon.com’ lacks a scheme, but is a valid URL.

Steps to Produce/Reproduce
--------------------------
1. run this test:
   System.out.println(validator.isValid("amazon.com"));
   
   This should validate and produce a true result but produces false. 


Expected Results
----------------
The should evaluate to true


Actual Results
--------------
Evaluates to False






BUG 2
FILE:UrlValidator.java
METHOD: isValidPath 
LINE: 412

Title:  URL’s with no path are marked as invalid

Class:  Serious Bug discovered when testing.  Bug traced to isValidPath method line 412.

Product:  UrlValidator.java   :Class version
Testing Environment Using Eclipse IDE using urlValidatorTest.java                 
           
Is it reproducible: Yes

Description
===========
1. What is the failure?
   While running tests on various URLs, we found that any URL that did not have a path was marked as invalid when it should be valid. 

2. How did you find it?
   We found this using the eye test. We started reading through the various methods in UrlValidator to see if we could notice any logic errors. 

3. What is the cause of that failure? explain what part of code is causing it?
   The cause of failure is located in the file ‘UrlValidator.java’, in the method IsValidPath. This method checks to see if a path is null or not, if it 
   is null it returns false. This should actually return true. Null Paths are a valid URL. An example of this is’ www.amazon.com/’ this url lacks a path, but is a valid URL.

Steps to Produce/Reproduce
--------------------------
1. run these test:
   System.out.println(validator.isValid("www.amazon.com/"));
            
   This should validate and produce a true result but produces false. 

Expected Results
----------------
The should evaluate to true

Actual Results
--------------
Evaluates to False






BUG 3
FILE: Urlvalidator.java
METHOD: isValidQuery
LINE: 447 

Title:  Queries that are valid are being returned as invalid

Class:  Serious Bug discovered when testing.  Bug traced to isValidQuery method line 447.

Product:  UrlValidator.java   :Class version
Testing Environment Using Eclipse IDE using urlValidatorTest.java                 
           
Is it reproducible: Yes

Description
===========
1. What is the failure?
   The failure is that a valid query gets returned false due to the method returning the opposite of QUERY_PATTERN.matcher(query).matches();

2. How did you find it?
   We were able to find this code by studying the source code. We noticed it looked wrong so we looked at a few of our tests that contained queries and noticed that 
   URLs that contained queries were evaluating to false when they should be true.

3. What is the cause of that failure? explain what part of code is causing it?
   The part of the code that is causing the failure is simply the ‘!’ located before QUERY_PATTERN.matcher(query).matches(); This returns the opposite of the QUERY_PATTERN value. 

Steps to Produce/Reproduce
--------------------------
Bug was found while looking for other bugs.

Expected Results
----------------
Should not have the ! (not) symbol in front of it. Queries matching the correct query pattern should evaluate to true and not the opposite.

Actual Results
--------------
Evaluates to boolean opposite of desired result. 






BUG 4
FILE:DomainValidator.java
METHOD: isValid
LINE: 139

Title:  Opposite validation Occurring when testing Authority portion of URL

Class:  Serious Bug discovered when testing.  Bug traced to isValid method line 139.

Reported By:  Rob Sparks, Phillip Tan, Bryan Bauer

Product:  DomainValidator.java   :Class version
Testing Environment:  Using Eclipse IDE using urlValidatorTest.java                 
           
Is it reproducible: Yes

Description
===========

1. What is the failure?
   The test returns false when it should return true and vise versa.

2. How did you find it?
   When conducting our manual test a number of test came up true when they should have been false and vise versa.  In an attempt to further refine we tested the first partition, 
   the scheme and all tests succeeded and produced correct results.  We then moved on to the authority division and this produced some incorrect results.   
   A run of the eclipse debug and some logic showed that the it might be coming from the function isValid. 

3. What is the cause of that failure? explain what part of code is causing it?\
   We found a line in isValid method in DominionValidotor.java that has a ! or a not when it should not be there (pun).  The line number is 139.

Steps to Produce/Reproduce
--------------------------
1. run these test:
   System.out.println(validator.isValid("http://hostname"));
   System.out.println(validator.isValid("http://localhost"));
            
   These should validate and produce a true result but they produce false. Because a previous test of http:// we know the problem is not in the first partition. 

Expected Results
----------------
The should evaluate to true.

Actual Results
--------------
Both tests evaluates to False.

Other Information
-----------------
After running a debug to find out system calls and line numbers we traced the problem to the isValid function call in DomainVaiidator.java.  
Line 139 reads  if (!hostnameRegex.isValid(domain)) {and we believe it should read  if (hostnameRegex.isValid(domain)) {   eliminating the not.